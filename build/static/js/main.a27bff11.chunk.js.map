{"version":3,"sources":["assets/twitter-logo.svg","components/Form.jsx","App.js","index.js"],"names":["Form","inputValue","inputChange","submitGIF","onSubmit","type","placeholder","value","onChange","className","SystemProgram","web3","arr","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","Keypair","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","TWITTER_HANDLE","TWITTER_LINK","RenderNotConnectedContainer","connectButton","walletAddress","onClick","RenderConnectedContainer","onInputChange","gifList","createGifAccount","map","gif","src","alt","userAddress","toString","App","useState","setWalletAddress","setInputValue","setGifList","checkWalletIsConected","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","error","connectWallet","getProvider","connection","Connection","Provider","provider","program","Program","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","getGifList","event","preventDefault","length","push","disconnectWallet","disconnect","account","fetch","useEffect","onLoad","addEventListener","removeEventListener","target","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gtCAAe,MAA0B,yC,iBCiB1BA,EAfF,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,WAAYC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,UACvC,OACE,uBAAMC,SAAUD,EAAhB,UACE,uBACEE,KAAK,OACLC,YAAY,kBACZC,MAAON,EACPO,SAAUN,IAEZ,wBAAQG,KAAK,SAASI,UAAU,+BAAhC,wB,gCCAEC,EAAkBC,IAAlBD,cAEFE,EAAMC,OAAOC,OAAOC,EAAGC,SAASC,WAChCC,EAAS,IAAIC,WAAWP,GACxBQ,EAAcT,IAAKU,QAAQC,cAAcJ,GAEzCK,EAAY,IAAIC,YAAUC,EAAIC,SAASC,SAEvCC,EAAUC,wBAAc,UAGxBC,EACiB,YAIjBC,EAAiB,iBACjBC,EAAY,8BAA0BD,GAqKtCE,EAA8B,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,cAAeC,EAAoB,EAApBA,cACpD,OACE,wBACE1B,UAAU,mCACV2B,QAAS,kBAAMF,KAFjB,SAIIC,EAAsC,oBAAtB,uBAKlBE,EAA2B,SAAC,GAM3B,IALLC,EAKI,EALJA,cACArC,EAII,EAJJA,WACAE,EAGI,EAHJA,UACAoC,EAEI,EAFJA,QACAC,EACI,EADJA,iBAEA,OAAgB,OAAZD,EAEA,qBAAK9B,UAAU,sBAAf,SACE,wBACEA,UAAU,+BACV2B,QAASI,EAFX,kEAUF,sBAAK/B,UAAU,sBAAf,UACE,cAAC,EAAD,CACEN,UAAWA,EACXD,YAAaoC,EACbrC,WAAYA,IAEd,qBAAKQ,UAAU,WAAf,SACG8B,EAAQE,KAAI,SAACC,GAAD,OACX,sBAAKjC,UAAU,WAAf,UACE,qBAAKkC,IAAKD,EAAKE,IAAKF,IACnBA,EAAIG,YAAYC,aAFYJ,YAU5BK,EApNH,WACV,MAA0CC,mBAAS,MAAnD,mBAAOb,EAAP,KAAsBc,EAAtB,KACA,EAAoCD,mBAAS,IAA7C,mBAAO/C,EAAP,KAAmBiD,EAAnB,KACA,EAA8BF,mBAAS,IAAvC,mBAAOT,EAAP,KAAgBY,EAAhB,KAEMC,EAAqB,uCAAG,gCAAAC,EAAA,oEAEPC,SAAXC,EAFkB,EAElBA,QAFkB,qBAIpBA,EAAOC,UAJa,wBAKtBC,QAAQC,IAAI,0BALU,SAMCH,EAAOI,QAAQ,CAAEC,eAAe,IANjC,OAMhBC,EANgB,OAOtBJ,QAAQC,IACN,2BACAG,EAASC,UAAUhB,YAErBG,EAAiBY,EAASC,UAAUhB,YAXd,gCAcxBW,QAAQC,IAAI,kDAdY,0DAiB1BD,QAAQM,MAAR,MAjB0B,0DAAH,qDAuBrBC,EAAa,uCAAG,gCAAAX,EAAA,2DACDC,SAAXC,EADY,EACZA,QADY,gCAGKA,EAAOI,UAHZ,OAGZE,EAHY,OAIlBZ,EAAiBY,EAASC,UAAUhB,YACpCW,QAAQC,IACN,+BACAG,EAASC,UAAUhB,YAPH,2CAAH,qDAiBbmB,EAAc,WAClB,IAAMC,EAAa,IAAIC,aAAWvC,EAASE,GAM3C,OALiB,IAAIsC,IACnBF,EACAZ,OAAOC,OACPzB,IAKEU,EAAgB,uCAAG,8BAAAa,EAAA,sEAEfgB,EAAWJ,IACXK,EAAU,IAAIC,IAAQ9C,EAAKF,EAAW8C,GAC5CZ,QAAQC,IAAI,QAJS,SAKfY,EAAQE,IAAIC,cAAc,CAC9BC,SAAU,CACRtD,YAAaA,EAAY0C,UACzBa,KAAMN,EAASO,OAAOd,UACtBe,cAAenE,EAAcoE,WAE/BC,QAAS,CAAC3D,KAXS,cAarBqC,QAAQC,IACN,wCACAtC,EAAY0C,UAAUhB,YAfH,SAiBfkC,IAjBe,yDAmBrBvB,QAAQC,IAAI,sCAAZ,MAnBqB,0DAAH,qDAuBhBvD,EAAS,uCAAG,WAAO8E,GAAP,SAAA5B,EAAA,sDAChB4B,EAAMC,iBACFjF,EAAWkF,OAAS,GACtB5C,EAAQ6C,KAAKnF,GACbiD,EAAc,KACTO,QAAQC,IAAI,wBALH,2CAAH,sDAQT2B,EAAgB,uCAAG,8BAAAhC,EAAA,+DACJC,OAAXC,EADe,EACfA,OADe,SAGjBA,EAAO+B,aAHU,OAIvBrC,EAAiB,MACjBQ,QAAQC,IAAI,oCALW,2CAAH,qDAQhBsB,EAAU,uCAAG,gCAAA3B,EAAA,sEAETgB,EAAWJ,IACXK,EAAU,IAAIC,IAAQ9C,EAAKF,EAAW8C,GAH7B,SAIOC,EAAQiB,QAAQnE,YAAYoE,MAChDpE,EAAY0C,WALC,OAITyB,EAJS,OAOf9B,QAAQC,IAAI,kBAAmB6B,GAE/BpC,EAAWoC,EAAQhD,SATJ,kDAWfkB,QAAQC,IAAI,wBAAZ,MACAP,EAAW,MAZI,0DAAH,qDA+BhB,OAfAsC,qBAAU,WACR,IAAMC,EAAM,uCAAG,sBAAArC,EAAA,sEACPD,IADO,2CAAH,qDAIZ,OADAE,OAAOqC,iBAAiB,OAAQD,GACzB,kBAAMpC,OAAOsC,oBAAoB,OAAQF,MAC/C,IAEHD,qBAAU,WACJtD,IACFsB,QAAQC,IAAI,sBACZsB,OAED,CAAC7C,IAGF,qBAAK1B,UAAU,MAAf,SACE,sBAAKA,UAAW0B,EAAgB,iBAAmB,YAAnD,UACE,sBAAK1B,UAAU,mBAAf,UACE,mBAAGA,UAAU,SAAb,2CACA,mBAAGA,UAAU,WAAb,0EAIA,cAAC,EAAD,CACEyB,cAAgBC,EAAgCkD,EAAhBrB,EAChC7B,cAAeA,IAGhBA,GACC,cAAC,EAAD,CACElC,WAAYA,EACZqC,cAtGU,SAAC2C,GACrB,IAAQ1E,EAAU0E,EAAMY,OAAhBtF,MACR2C,EAAc3C,IAqGJJ,UAAWA,EACXoC,QAASA,EACTC,iBAAkBA,OAIxB,sBAAK/B,UAAU,mBAAf,UACE,qBAAKmC,IAAI,eAAenC,UAAU,eAAekC,IAAKmD,IACtD,mBACErF,UAAU,cACVsF,KAAM/D,EACN6D,OAAO,SACPG,IAAI,aAJN,6BAKejE,cCrLzBkE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.a27bff11.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.4844b78f.svg\";","import React from \"react\";\r\n\r\nconst Form = ({ inputValue, inputChange, submitGIF }) => {\r\n  return (\r\n    <form onSubmit={submitGIF}>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter gif link!\"\r\n        value={inputValue}\r\n        onChange={inputChange}\r\n      />\r\n      <button type=\"submit\" className=\"cta-button submit-gif-button\">\r\n        Submit\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\nexport default Form;\r\n","import { useState, useEffect } from \"react\";\r\nimport twitterLogo from \"./assets/twitter-logo.svg\";\r\nimport \"./App.css\";\r\nimport Form from \"./components/Form\";\r\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\r\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\r\nimport idl from \"./idl.json\";\r\nimport kp from \"./keypair.json\";\r\n\r\n// 8aTD2oktQ3abJr91FAW1fvYWbB8BeVLz5CWtXpuRU2Z\r\n\r\nconst { SystemProgram } = web3;\r\n//get keypair\r\nconst arr = Object.values(kp._keypair.secretKey);\r\nconst secret = new Uint8Array(arr);\r\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\r\n\r\nconst programID = new PublicKey(idl.metadata.address);\r\n// Set our network to devnet.\r\nconst network = clusterApiUrl(\"devnet\");\r\n\r\n// Controls how we want to acknowledge when a transaction is \"done\".\r\nconst opts = {\r\n  preflightCommitment: \"processed\",\r\n};\r\n\r\n// Constants\r\nconst TWITTER_HANDLE = \"samuelosinloye\";\r\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\r\n\r\nconst App = () => {\r\n  const [walletAddress, setWalletAddress] = useState(null);\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [gifList, setGifList] = useState([]);\r\n\r\n  const checkWalletIsConected = async () => {\r\n    try {\r\n      const { solana } = window;\r\n      if (solana) {\r\n        if (solana.isPhantom) {\r\n          console.log(\"Phantom wallet found!!\");\r\n          const response = await solana.connect({ onlyIfTrusted: true });\r\n          console.log(\r\n            \"Solana with public key: \",\r\n            response.publicKey.toString()\r\n          );\r\n          setWalletAddress(response.publicKey.toString());\r\n        }\r\n      } else {\r\n        console.log(\"Solana object not found, get a phantom wallet.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  // Connect button;\r\n\r\n  const connectWallet = async () => {\r\n    const { solana } = window;\r\n    if (solana) {\r\n      const response = await solana.connect();\r\n      setWalletAddress(response.publicKey.toString());\r\n      console.log(\r\n        \"Save public key to phantom: \",\r\n        response.publicKey.toString()\r\n      );\r\n    }\r\n  };\r\n\r\n  const onInputChange = (event) => {\r\n    const { value } = event.target;\r\n    setInputValue(value);\r\n  };\r\n\r\n  const getProvider = () => {\r\n    const connection = new Connection(network, opts.preflightCommitment);\r\n    const provider = new Provider(\r\n      connection,\r\n      window.solana,\r\n      opts.preflightCommitment\r\n    );\r\n    return provider;\r\n  };\r\n\r\n  const createGifAccount = async () => {\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n      console.log(\"ping\");\r\n      await program.rpc.startStuffOff({\r\n        accounts: {\r\n          baseAccount: baseAccount.publicKey,\r\n          user: provider.wallet.publicKey,\r\n          systemProgram: SystemProgram.programId,\r\n        },\r\n        signers: [baseAccount],\r\n      });\r\n      console.log(\r\n        \"Created a new BaseAccount w/ address:\",\r\n        baseAccount.publicKey.toString()\r\n      );\r\n      await getGifList();\r\n    } catch (error) {\r\n      console.log(\"Error creating BaseAccount account:\", error);\r\n    }\r\n  };\r\n\r\n  const submitGIF = async (event) => {\r\n    event.preventDefault();\r\n    if (inputValue.length > 0) {\r\n      gifList.push(inputValue);\r\n      setInputValue(\"\");\r\n    } else console.log(\"No input, try again!\");\r\n  };\r\n\r\n  const disconnectWallet = async () => {\r\n    const { solana } = window;\r\n\r\n    await solana.disconnect();\r\n    setWalletAddress(null);\r\n    console.log(\"Solana successfully disconnected\");\r\n  };\r\n\r\n  const getGifList = async () => {\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n      const account = await program.account.baseAccount.fetch(\r\n        baseAccount.publicKey\r\n      );\r\n      console.log(\"Got the account\", account);\r\n      // console.log();\r\n      setGifList(account.gifList);\r\n    } catch (error) {\r\n      console.log(\"Error in getGifList: \", error);\r\n      setGifList(null);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const onLoad = async () => {\r\n      await checkWalletIsConected();\r\n    };\r\n    window.addEventListener(\"load\", onLoad);\r\n    return () => window.removeEventListener(\"load\", onLoad);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (walletAddress) {\r\n      console.log(\"Fetching GIFs list\");\r\n      getGifList();\r\n    }\r\n  }, [walletAddress]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className={walletAddress ? \"auth-container\" : \"container\"}>\r\n        <div className=\"header-container\">\r\n          <p className=\"header\">🖼 SPORT GIF Portal</p>\r\n          <p className=\"sub-text\">\r\n            View your GIF collection in the metaverse ✨🕊\r\n          </p>\r\n\r\n          <RenderNotConnectedContainer\r\n            connectButton={!walletAddress ? connectWallet : disconnectWallet}\r\n            walletAddress={walletAddress}\r\n          ></RenderNotConnectedContainer>\r\n\r\n          {walletAddress && (\r\n            <RenderConnectedContainer\r\n              inputValue={inputValue}\r\n              onInputChange={onInputChange}\r\n              submitGIF={submitGIF}\r\n              gifList={gifList}\r\n              createGifAccount={createGifAccount}\r\n            />\r\n          )}\r\n        </div>\r\n        <div className=\"footer-container\">\r\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\r\n          <a\r\n            className=\"footer-text\"\r\n            href={TWITTER_LINK}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >{`built on @${TWITTER_HANDLE}`}</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst RenderNotConnectedContainer = ({ connectButton, walletAddress }) => {\r\n  return (\r\n    <button\r\n      className=\"cta-button connect-wallet-button\"\r\n      onClick={() => connectButton()}\r\n    >\r\n      {!walletAddress ? \"Connect to Wallet\" : \"Disconnect wallet\"}\r\n    </button>\r\n  );\r\n};\r\n\r\nconst RenderConnectedContainer = ({\r\n  onInputChange,\r\n  inputValue,\r\n  submitGIF,\r\n  gifList,\r\n  createGifAccount,\r\n}) => {\r\n  if (gifList === null) {\r\n    return (\r\n      <div className=\"connected-container\">\r\n        <button\r\n          className=\"cta-button submit-gif-button\"\r\n          onClick={createGifAccount}\r\n        >\r\n          Do One-Time Initialization For GIF Program Account\r\n        </button>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"connected-container\">\r\n        <Form\r\n          submitGIF={submitGIF}\r\n          inputChange={onInputChange}\r\n          inputValue={inputValue}\r\n        />\r\n        <div className=\"gif-grid\">\r\n          {gifList.map((gif) => (\r\n            <div className=\"gif-item\" key={gif}>\r\n              <img src={gif} alt={gif} />\r\n              {gif.userAddress.toString()}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}